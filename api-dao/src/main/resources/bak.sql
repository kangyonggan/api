INSERT INTO article
(title, tags, content, create_username, create_fullname, is_deleted, created_time, updated_time)
VALUES
  ('Ubuntu14.0.4安装及配置系列 - jdk1.8的安装配', '安装配置',
   '### 1. 下载[jdk1.8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)到本地\r\n\r\n### 2. 上传本地jdk到Ubuntu服务器\r\n`$ scp jdk-8u111-linux-x64.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压jdk到指定目录\r\n`# tar -zxvf jdk-8u111-linux-x64.tar.gz -C /root/install/`\r\n\r\n### 4. 配置jdk的环境变量\r\n在`/etc/profile`文件尾追加下面的配置:\r\n\r\n```\r\n# jdk environment  \r\nexport JAVA_HOME=/root/install/jdk1.8.0_111  \r\nexport JRE_HOME=/root/install/jdk1.8.0_111/jre  \r\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH  \r\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\r\n```\r\n\r\n之后，重新加载配置，让配置生效:\r\n\r\n`# source profile`\r\n\r\n### 5. 测试环境变量是否生效\r\n\r\n`# java -version`\r\n\r\n',
   'kangyonggan', '康永敢', 0, '2016-12-17 18:10:45', '2016-12-19 01:44:15'),
  ('Ubuntu14.0.4安装及配置系列 - maven3.3.9', '安装配置', '### 1. 下载[maven3.3.9](http://maven.apache.org/download.cgi)到本地\r\n\r\n### 2. 上传本地maven到Ubuntu服务器\r\n`$ scp apache-maven-3.3.9-bin.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压maven到指定目录\r\n`# tar -zxvf apache-maven-3.3.9-bin.tar.gz -C /root/install/`\r\n\r\n### 4. 配置maven的环境变量\r\n在`/etc/profile`文件尾追加下面的配置:\r\n\r\n```\r\n# maven environment\r\nexport M2_HOME=/root/install/apache-maven-3.3.9\r\nexport PATH=$PATH:$M2_HOME/bin\r\n```\r\n\r\n之后，重新加载配置，让配置生效:\r\n\r\n`# source profile`\r\n\r\n### 5. 测试环境变量是否生效\r\n`# mvn -version`\r\n\r\n### 6. 配置本地仓库路径\r\n在`/root/install/apache-maven-3.3.9/conf/settings.xml`文件中配置:\r\n\r\n`<localRepository>/root/data/repository</localRepository>`\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:11:33', '2016-12-19 01:43:58'),
  ('Ubuntu14.0.4安装及配置系列 - git1.9.1的安装配置', '安装配置', '### 0. 更新apt-get\r\n`# apt-get update`\r\n\r\n### 1. 下载git\r\n`# apt-get install git`\r\n\r\n### 2. 测试git是否生效\r\n`# git --version`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:14:56', '2016-12-18 06:16:21'),
  ('Ubuntu14.0.4安装及配置系列 - mysql5.6的安装配置', '安装配置', '### 1. 安装\r\n`apt-get install mysql-server-5.6`\r\n\r\n### 2. 启动\r\n`# /etc/init.d/mysql start`\r\n\r\n### 3. 停止\r\n`# /etc/init.d/mysql stop`\r\n\r\n### 4. 重启\r\n`# /etc/init.d/mysql restart`\r\n\r\n### 5. 调整内存\r\n修改`/etc/mysql/my.cnf`,在`[mysqld]`后面追加\r\n\r\n```\r\nperformance_schema_max_table_instances=200\r\ntable_definition_cache=200\r\ntable_open_cache=128\r\n```\r\n\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:15:28', '2016-12-19 01:43:40'),
  ('Ubuntu14.0.4安装及配置系列 - redis3.2.0的安装配置', '安装配置', '### 1. 下载[redis3.2](https://redis.io/)到本地\r\n\r\n### 2. 上传本地redis到Ubuntu服务器\r\n`$ scp redis-3.2.0.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压redis到指定目录\r\n`# tar -zxvf redis-3.2.0.tar.gz -C /root/install/`\r\n\r\n### 4. 安装\r\n`make install`\r\n\r\n### 5. 配置\r\n在`/root/install/redis-3.2.0/redis.conf`后面追加下面的配置:\r\n\r\n`requirepass 123456`\r\n\r\n### 6. 启动\r\n`# redis-server redis.conf &`\r\n\r\n### 6. 测试\r\n\r\n```\r\n# redis-cli -a 123456\r\n> ping\r\n```\r\n\r\n输出:`PONG`\r\n\r\n### 7. 停止\r\n`# redis-cli -a 123456 shutdown`\r\n\r\n### 8. 清空所有缓存\r\n`# redis-cli -a 123456 KEYS \"*\" | xargs redis-cli -a 123456 DEL`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:15:53', '2016-12-19 01:42:34'),
  ('Ubuntu14.0.4安装及配置系列 - tomcat8.5.6的安装配置', '安装配置', '### 1. 下载[tomcat8.5.6](http://tomcat.apache.org/download-80.cgi)到本地\r\n\r\n### 2. 上传本地tomcat到Ubuntu服务器\r\n`$ scp apache-tomcat-8.5.6.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压tomcat到指定目录\r\n`# tar -zxvf apache-tomcat-8.5.6.tar.gz -C /root/install/`\r\n\r\n### 4. 启动\r\n`# sh startup.sh`\r\n\r\n### 5. 停止\r\n`# sh shutdown.sh`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:16:15', '2016-12-18 06:13:59'),
  ('Ubuntu14.0.4安装及配置系列 - zookeeper3.4.9的安装配置', '安装配置', '### 1. 下载[zookeeper3.4.9](http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.9/)到本地\r\n\r\n### 2. 上传本地zookeeper到Ubuntu服务器\r\n`$ scp zookeeper-3.4.9.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压zookeeper到指定目录\r\n\r\n```\r\nmkdir /root/install/server1\r\n# tar zxvf zookeeper-3.4.9.tar.gz -C /root/install/server1/\r\n```\r\n\r\n### 4. 配置（集群）\r\n在`server1`目录下创建两个目录，分别是`data`和`logs`\r\n\r\n```\r\ncd /root/install/server1/\r\nmkdir data\r\nmkdir logs\r\n```\r\n\r\n此时，server1目录下有三个文件\r\n\r\n```\r\nroot@iZ23ldh8kudZ:~/install/server1# pwd\r\n/root/install/server1\r\nroot@iZ23ldh8kudZ:~/install/server1# ll\r\ntotal 20\r\ndrwxr-xr-x  5 root root 4096 Dec 17 15:43 ./\r\ndrwxr-xr-x  8 root root 4096 Dec 17 15:39 ../\r\ndrwxr-xr-x  2 root root 4096 Dec 17 15:43 data/\r\ndrwxr-xr-x  2 root root 4096 Dec 17 15:43 logs/\r\ndrwxr-xr-x 10 1001 1001 4096 Aug 23 15:42 zookeeper-3.4.9/\r\n```\r\n\r\n在`data`目录下创建文件`myid`,其内容为`1`\r\n\r\n```\r\nvi /data/myid\r\n# 内容为1\r\n```\r\n\r\n复制配置文件`zookeeper-3.4.9/conf/zoo_sample.cfg`到`zookeeper-3.4.9/conf/zoo.cfg`, 并修改其内容:\r\n\r\n```xml\r\ntickTime=2000\r\ninitLimit=10\r\nsyncLimit=5\r\ndataDir=/root/install/server1/data\r\ndataLogsDir=/root/install/server1/logs\r\nclientPort=2181\r\n\r\nserver.1=121.40.66.176:2888:3888\r\nserver.2=139.196.28.125:2888:3888\r\n```\r\n\r\n> 每台服务器都要有类似的配置\r\n\r\n### 5. 环境变量\r\n\r\n在`/etc/profile`文件最后追加:\r\n\r\n```\r\n# zookeeper environment\r\nexport PATH=$PATH:/root/install/server1/zookeeper-3.4.9/bin\r\n```\r\n\r\n立即生效\r\n\r\n`# source /etc/profile`\r\n\r\n### 6. 启动\r\n\r\n`# zkServer.sh start`\r\n\r\n### 7. 查看是否启动\r\n\r\n```\r\nroot@iZ23ldh8kudZ:~/install/server1/zookeeper-3.4.9# jps\r\n7096 QuorumPeerMain\r\n7114 Jps\r\n```\r\n\r\n看到`QuorumPeerMain`就说明启动成功了\r\n\r\n### 8. 停止\r\n\r\n`# zkServer.sh stop`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:16:39', '2016-12-19 01:43:12'),
  ('Ubuntu14.0.4安装及配置系列 - nexus3.1.0的安装配置', '安装配置', '### 1. 下载[nexus3.1.0](https://www.sonatype.com/download-oss-sonatype)到本地\r\n\r\n### 2. 上传本地nexus到Ubuntu服务器\r\n`$ scp nexus-3.1.0-04-unix.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压nexus到指定目录\r\n`# tar -zxvf nexus-3.1.0-04-unix.tar.gz -C /root/install/`\r\n\r\n### 4. 启动\r\n`# ./nexus start`\r\n\r\n### 5. 停止\r\n`# ./nexus stop`\r\n\r\n### 6. 访问\r\nhttp://kangyonggan.com:8081/\r\n\r\n- 用户名:admin\r\n- 密码:admin123\r\n\r\n登录后的界面:\r\n\r\n![nexus](http://kangyonggan.com/upload/20161218/20161218022105221.png)\r\n\r\n### 7. 使用\r\n\r\n配置`settings.xml`\r\n\r\n```xml\r\n<servers>\r\n    <server>\r\n      <id>releases</id>\r\n      <username>admin</username>\r\n      <password>admin123</password>\r\n    </server>\r\n    <server>\r\n      <id>snapshots</id>\r\n      <username>admin</username>\r\n      <password>admin123</password>\r\n    </server>\r\n  </servers>\r\n```\r\n\r\n配置`pom.xml`\r\n\r\n```xml\r\n<distributionManagement>\r\n    <repository>\r\n        <id>releases</id>\r\n        <name>nexus releases</name>\r\n        <url>http://kangyonggan.com:8081/repository/maven-releases/</url>\r\n    </repository>\r\n\r\n    <snapshotRepository>\r\n        <id>snapshots</id>\r\n        <name>nexus snapshots</name>\r\n        <url>http://kangyonggan.com:8081/repository/maven-snapshots/</url>\r\n    </snapshotRepository>\r\n</distributionManagement>\r\n```\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:21:05', '2016-12-18 06:12:08'),
  ('Ubuntu14.0.4安装及配置系列 - dubbo-monitor2.5.3的安装配置', '安装配置', '### 1. 下载[dubbo-monitor2.5.3](http://download.csdn.net/detail/liweifengwf/7864009)到本地\r\n\r\n### 2. 上传本地dubbo-monitor到Ubuntu服务器\r\n`$ scp dubbo-monitor-simple-2.5.3-assembly.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压dubbo-monitor到指定目录\r\n`# tar -zxvf dubbo-monitor-simple-2.5.3-assembly.tar.gz -C /root/install/`\r\n\r\n### 4. 配置\r\n修改`conf/dubbo.properties`中`dubbo.registry.address`的值：\r\n\r\n`dubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181`\r\n\r\n### 5. 启动\r\n`# ./bin/start.sh`\r\n\r\n### 6. 停止\r\n`# ./bin/stop.sh`\r\n\r\n### 7. 重启\r\n`# ./bin/restart.sh`\r\n\r\n### 8. 访问\r\nhttp://kangyonggan.com:8080/  \r\n界面如下:\r\n\r\n![dubbo-monitor](http://kangyonggan.com/upload/20161218/20161218022228172.png)\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:22:28', '2016-12-18 06:11:26'),
  ('Ubuntu14.0.4安装及配置系列 - dubbo-admin的安装配置', '安装配置', '### 1. 上传本地dubbo-admin到Ubuntu服务器\r\n`$ scp dubbo-admin.war root@121.40.66.176:/root/soft/`\r\n\r\n### 2. 解压dubbo-monitor到tomcat/webapps/ROOT/目录下\r\n`# unzip dubbo-admin.war -d /root/install/apache-tomcat-8.5.6/webapps/ROOT/`\r\n\r\n### 3. 配置\r\n修改`webapps/ROOT/WEB-INF/dubbo.properties`中`dubbo.registry.address`的值：\r\n\r\n`dubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181`\r\n\r\n修改tomcat的server.xml：\r\n\r\n```xml\r\n<Connector port=\"9090\" protocol=\"HTTP/1.1\"\r\n               connectionTimeout=\"20000\"\r\n               redirectPort=\"8443\" />\r\n```\r\n\r\n### 4. 启动\r\n`# sh bin/startup.sh`\r\n\r\n### 5. 停止\r\n`# sh bin/shutdown.sh`\r\n\r\n### 6. 访问\r\nhttp://kangyonggan.com:9090/  \r\n\r\n- 用户名:\r\n- 密码:\r\n\r\n登录后界面如下:\r\n\r\n![dubbo-admin](http://kangyonggan.com/upload/20161218/20161218022315633.png)\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:23:15', '2016-12-18 06:10:04'),
  ('SSH 免密登录', 'Linux', '现在有两台机器A和B， 想要用ssh从A登录到B， 并且不使用密码\r\n\r\n### 1. 在A机器上生成密钥对\r\n`ssh-keygen -t rsa`\r\n\r\n然后会有三次提示用户输入， 什么也不要输入， 直接回车， 就会在用户根目录生成`.ssh`文件夹, 文件夹里会有`id_rsa`私钥和`id_rsa.pub`公钥\r\n\r\n### 2. 把公钥导入B机器\r\n`ssh-copy-id -i .ssh/id_rsa.pub root@192.168.20.212`\r\n\r\n执行这个命令会要求输入一次密码， 不过以后就不用再输密码了。  \r\n如果A机器没安装ssh-copy-id命令， 也可以手动导入， 先把公钥scp到B机器（也要输入一次密码），   \r\n然后输出到.ssh/authorized_keys文件中即可\r\n\r\n`cat id_rsa.pub > .ssh/authorized_keys`\r\n\r\n### 3. 免密登录测试\r\n\r\n`ssh root@192.168.20.212`\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 18:31:51', '2016-12-18 06:56:14'),
  ('log4j2的配置', 'Java', '```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\" monitorInterval=\"300\">\r\n    <properties>\r\n        <property name=\"LOG_HOME\">/Users/kyg/logs/test</property>\r\n    </properties>\r\n\r\n    <Appenders>\r\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"/>\r\n        </Console>\r\n        <RollingRandomAccessFile name=\"AllFile\" fileName=\"${LOG_HOME}/all.log\"\r\n                                 filePattern=\"${LOG_HOME}/all-%d{yyyy-MM-dd}-%i.log\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"/>\r\n            <Policies>\r\n                <TimeBasedTriggeringPolicy interval=\"1\"/>\r\n                <SizeBasedTriggeringPolicy size=\"500 MB\"/>\r\n            </Policies>\r\n            <DefaultRolloverStrategy max=\"30\"/>\r\n            <Filters>\r\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\r\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\r\n            </Filters>\r\n        </RollingRandomAccessFile>\r\n        <RollingRandomAccessFile name=\"ErrorFile\" fileName=\"${LOG_HOME}/error.log\"\r\n                                 filePattern=\"${LOG_HOME}/error-%d{yyyy-MM-dd}-%i.log\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"/>\r\n            <Policies>\r\n                <TimeBasedTriggeringPolicy interval=\"1\"/>\r\n                <SizeBasedTriggeringPolicy size=\"500 MB\"/>\r\n            </Policies>\r\n            <DefaultRolloverStrategy max=\"30\"/>\r\n            <Filters>\r\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\r\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\r\n            </Filters>\r\n        </RollingRandomAccessFile>\r\n        <Async name=\"AsyncAll\">\r\n            <AppenderRef ref=\"AllFile\"/>\r\n        </Async>\r\n        <Async name=\"AsyncError\">\r\n            <AppenderRef ref=\"ErrorFile\"/>\r\n        </Async>\r\n    </Appenders>\r\n\r\n    <Loggers>\r\n        <Root level=\"debug\" additivity=\"true\">\r\n            <AppenderRef ref=\"Console\"/>\r\n            <AppenderRef ref=\"AsyncAll\"/>\r\n            <AppenderRef ref=\"AsyncError\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```', 'kangyonggan', '康永敢', 0, '2016-12-17 18:36:05', '2016-12-22 06:06:35'),
  ('.gitignore', 'Java', '```\r\n# Maven #\r\ntarget/\r\n\r\n# IDEA #\r\n.idea/\r\n*.iml\r\n\r\n# Eclipse #\r\n.settings/\r\n.metadata/\r\n.classpath\r\n.project\r\nServers/\r\n```', 'kangyonggan', '康永敢', 0, '2016-12-18 06:53:08', '2016-12-19 01:41:34'),
  ('数据库垂直拆分', '数据库', '> 原文: [一分钟掌握数据库垂直拆分](https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651959773&idx=1&sn=7e4ad0dcd050f6662dfaf39d9de36f2c&chksm=bd2d04018a5a8d17b92098b4840aac23982e32d179cdd957e4c55011f6a08f6bd31f9ba5cfee&scene=0&key=564c3e9811aee0ab569a7c0cf0fec2e9951b47e1558e2eba479aa4586f613f1466391cbeb4f73d853437fe4fb4249617be06fcd0bdfff0d236dd9328a2725ba2a81dd25a04f8e837bfb7b2de08f1ce38&ascene=0&uin=MzE3ODAyODM0Mg%3D%3D&devicetype=iMac+MacBookPro11%2C4+OSX+OSX+10.12+build&version=12010110&nettype=WIFI&fontScale=100&pass_ticket=BWwhfr0EkpciW2l%2B%2B11CnZoyjMobfYu8fgfGHs%2FZP06yl%2Bc9lP4EMz7CoCMeqNeb)\r\n\r\n## 一、缘起\r\n当数据库的数据量非常大时，水平切分和垂直拆分是两种常见的降低数据库大小，提升性能的方法。假设有用户表：\r\n\r\n```\r\nuser(\r\nuid bigint,\r\nname varchar(16),\r\npass varchar(16),\r\nage int,\r\nsex tinyint,\r\nflag tinyint,\r\nsign varchar(64),\r\nintro varchar(256)\r\n…);\r\n```\r\n\r\n**水平切分是指**，`以某个字段为依据（例如uid），按照一定规则（例如取模），将一个库（表）上的数据拆分到多个库（表）上`，以降低单库（表）大小，达到提升性能的目的的方法，水平切分后，各个库（表）的特点是：  \r\n- 每个库（表）的`结构都一样`\r\n- 每个库（表）的`数据都不一样，没有交集`\r\n- 所有库（表）的`并集是全量数据`\r\n\r\n## 二、什么是垂直拆分\r\n垂直拆分是指，`将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中`，以降低单库（表）大小，达到提升性能的目的的方法，垂直切分后，各个库（表）的特点是：  \r\n- 每个库（表）的`结构都不一样`\r\n- 一般来说，每个库（表）的`属性至少有一列交集，一般是主键`\r\n- 所有库（表）的`并集是全量数据`\r\n还是以上文提到的用户表为例，如果要垂直拆分，可能拆分结果会是这样的:  \r\n \r\n```\r\nuser_base(\r\nuid bigint,\r\nname varchar(16),\r\npass varchar(16),\r\nage int,\r\nsex tinyint,\r\nflag tinyint,\r\n…);\r\n \r\nuser_ext(\r\nuid bigint, \r\nsign varchar(64),\r\nintro varchar(256)\r\n…);\r\n```\r\n\r\n## 三、垂直切分的依据是什么\r\n当一个表属性很多时，如何来进行垂直拆分呢？如果没有特殊情况，拆分依据主要有几点：  \r\n- 将`长度较短，访问频率较高`的属性尽量放在一个表里，这个表暂且称为主表\r\n- 将`字段较长，访问频率较低`的属性尽量放在一个表里，这个表暂且称为扩展表\r\n- `经常一起访问的属性`，也可以放在一个表里（如果1和2都满足，还可以考虑第三点）\r\n\r\n优先考虑1和2，第3点不是必须。另，如果实在属性过多，主表和扩展表都可以有多个。\r\n \r\n一般来说，数据量并发量比较大时，数据库的上层都会有一个服务层。需要注意的是，当应用方需要`同时访问主表和扩展表中的属性时，服务层不要使用join来连表访问，而应该分两次进行查询`：\r\n\r\n![](http://kangyonggan.com/upload/20161221/20161221171817743.png)\r\n\r\n原因是，大数据高并发互联网场景下，一般来说，**吞吐量和扩展性**是主要矛盾：  \r\n- join更消损耗数据库性能\r\n- join会让base表和ext表耦合在一起（必须在一个数据库实例上），`不利于数据量大时拆分到不同的数据库实例上`（机器上）。毕竟减少数据量，提升性能才是垂直拆分的初衷。\r\n\r\n## 四、为什么要这么这么拆分\r\n为何要将字段短，访问频率高的属性放到一个表内？为何这么垂直拆分可以提升性能？因为：  \r\n- 数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里（暂且理解为进程内缓存吧）\r\n- `内存buffer缓存数据是以row为单位的`\r\n- 在内存有限的情况下，在数据库内存buffer里缓存短row，就能缓存更多的数据\r\n- 在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘的访问\r\n \r\n举个例子就很好理解了：  \r\n假设数据库内存buffer为1G，未拆分的user表1行数据大小为1k，那么只能缓存100w行数据。  \r\n如果垂直拆分成user_base和user_ext，其中：  \r\n- user_base访问频率高（例如uid, name, passwd, 以及一些flag等），一行大小为0.1k\r\n- user_ext访问频率低（例如签名, 个人介绍等），一行大小为0.9k\r\n\r\n那边内存buffer就就能缓存近乎1000w行user_base的记录，访问磁盘的概率会大大降低，数据库访问的时延会大大降低，吞吐量会大大增加。\r\n\r\n## 五、总结\r\n- 水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段\r\n- 流量大，数据量大时，数据访问要有service层，并且service层`不要通过join来获取主表和扩展表的属性`\r\n- 垂直拆分的依据，尽量把`长度较短，访问频率较高的属性放在主表里`', 'kangyonggan', '康永敢', 0, '2016-12-21 09:18:17', '2016-12-21 09:22:01'),
  ('用jdk自带的keytool导入查看删除证书', 'Java', '## 导入证书:\r\n\r\nsudo keytool -import -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -alias sh2_test -file /Users/kyg/Downloads/sh2_test.cer\r\n## 删除证书\r\n\r\nsudo keytool -delete -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit\r\n\r\n## 查看证书\r\n\r\nkeytool -list -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit\r\n\r\n## 提示\r\n- 使用时，jdk路径请自行替换\r\n- 一般cacerts的密码默认为changit\r\n- keytool命令在bin目录下', 'kangyonggan', '康永敢', 0, '2016-12-21 09:26:33', '2016-12-21 09:29:08'),
  ('Ubuntu14.0.4安装及配置系列 - jenkins的安装配置', '安装配置', '### 1. 下载[jenkins](jenkins.io/index.html)到本地\r\n\r\n### 2. 上传本地jenkins到Ubuntu服务器\r\n\r\n`$ scp jenkins.war root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 直接把war包放入tomcat的webapps目录下并重启tomcat即可\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-21 12:33:27', '2016-12-21 12:33:27'),
  ('ubuntu下方向键不好使的解决方案', 'Linux', '先卸载vim-tiny：\r\n\r\n`$ sudo apt-get remove vim-common`\r\n\r\n再安装vim full：\r\n\r\n`$ sudo apt-get install vim`', 'kangyonggan', '康永敢', 0, '2016-12-24 10:27:40', '2016-12-24 10:27:40'),
  ('ubuntu16.0.4启动zookeeper报错', 'Linux', '### 报错信息:  \r\nbin/zkServer.sh: 81: /home/kyg/install/server1/zookeeper-3.4.9/bin/zkEnv.sh: Syntax error: \"(\" unexpected (expecting \"fi\")\r\n\r\n### 解决方案\r\n```\r\nls -l /bin/sh\r\nlrwxrwxrwx 1 root root 4 12月 24 17:22 /bin/sh -> dash\r\nls -l /bin/sh\r\nlrwxrwxrwx 1 root root 4 12月 24 20:01 /bin/sh -> bash\r\n```\r\n\r\n> 需要root权限', 'kangyonggan', '康永敢', 0, '2016-12-24 12:02:44', '2016-12-24 12:02:44'),
  ('mysql数据库备份', '数据库', '`mysqldump -uroot -p blog > /home/kyg/blog.sql`', 'kangyonggan', '康永敢', 0, '2016-12-24 13:32:04', '2016-12-24 13:32:04'),
  ('ssh端口转发', 'Linux', '转发到远端：ssh -C -f -N -g -L 本地端口:目标IP:目标端口 用户名@目标IP  \r\n\r\n转发到本地：ssh -C -f -N -g –R 本地端口:目标IP:目标端口 用户名@目标IP', 'kangyonggan', '康永敢', 0, '2016-12-24 13:33:30', '2016-12-24 13:33:30'),
  ('Tomcat 8 访问软连接目录下的文件', 'Tomcat', '### Tomcat 7:\r\n`<Context allowLinking=\"true\" />`\r\n\r\n### Tomcat 8:\r\n```\r\n<Context>\r\n  <Resources allowLinking=\"true\" />\r\n</Context>\r\n```', 'kangyonggan', '康永敢', 0, '2016-12-24 14:56:31', '2016-12-24 14:56:31');


INSERT INTO dictionary (code, value, type, sort)
  VALUE
  ('install', '安装配置', 'article_tag', 0),
  ('linux', 'Linux', 'article_tag', 0),
  ('java', 'Java', 'article_tag', 0),
  ('db', '数据库', 'article_tag', 0),
  ('tomcat', 'Tomcat', 'article_tag', 0);

INSERT INTO article_dictionary (article_id, dictionary_code)
  SELECT a.id, d.code FROM article a, dictionary d WHERE a.tags = d.value;
